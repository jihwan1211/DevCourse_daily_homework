## 회원 API

    1. 회원 가입
        - Method : POST
        - URL : /join
        - HTTP Status code : 성공(201 - created), 실패
        - Request Body : JSON형태, email, password
        - Response Body :
    2. 로그인
        - Method : POST
        - URL : /login
        - HTTP Status code : 성공(200), 실패
        - Request Body : JSON형태, email, password
        - Response Body : JWT Token
    3. 비밀번호 초기화 요청
        - Method : POST
        - URL : /reset
        - HTTP Status code : 성공(200), 실패
        - Request Body : JSON형태, email
        - Response Body :
    4. 비밀번호 초기화
        - Method : PUT
        - URL : /reset
        - HTTP Status code : 성공(200), 실패
        - Request Body : JSON형태, password1, password2
        - Response Body :

---

## 도서 API

    1. 전체 도서 조회 (페이지네이션 고려 x)
        - Method : GET
        - URL : /books
        - HTTP Status code : 성공(200), 실패
        - Request Body :
        - Response Body : [{book_id, img_url, title, summary, author, price, likes, publish_date}, …{}]
    2. 개별 도서 조회
        - Method : GET
        - URL : /books/:bookId
        - HTTP Status code : 성공(200), 실패
        - Request Body :
        - Response Body : {img_url, title, category, format, isbn, summary, descripiton, author, pages, index, price, likes, me_liked, images: [], publish_date}
    3. 카테고리별 도서 목록 조회

        new:true → 신간 조회(출판일 30일 이내)

        - Method : GET
        - URL : /books?category={categoryId}&new={}
        - HTTP Status code : 성공(200), 실패
        - Request Body :
        - Response Body : [{book_id, img_url, title, summary, author, price, likes, publish_date}, …{}]

        - 좋아요 API 설계 1차
    1. 좋아요 추가
        - Method : PUT
        - URL : /likes/:bookId
        - HTTP Status code : 성공(200), 실패
        - Request Body : user_id
        - Response Body : []
    2. 좋아요 취소
        - Method : PUT
        - URL : /likes/:bookId
        - HTTP Status code : 성공(200), 실패
        - Request Body : user_id
        - Response Body : []

---

## 장바구니 API 설계

    1. 장바구니 담기
        - Method : POST
        - URL : /cart
        - HTTP Status code : 성공(201 - inserted, created), 실패
        - Request Body : {book_id, count : 도서 수량}
        - Response Body :
    2. 장바구니 조회
        - Method : GET
        - URL : /cart
        - HTTP Status code : 성공(200), 실패
        - Request Body :
        - Response Body : [{cart_item_id : 장바구니 항목 id, book_id, title, summary, price, img_url, count : 도서 수량}, …{}]
    3. 장바구니 삭제
        - Method : DELETE
        - URL : /cart/:bookId
        - HTTP Status code : 성공(200), 실패
        - Request Body :
        - Response Body :

---

## 주문 API 설계

    1. 장바구니에서 선택한 상품 목록 조회
        - Method : GET
        - URL : /cart
        - HTTP Status code : 성공(200), 실패
        - Request Body : []
        - Response Body : [{cart_item_id : 장바구니 항목 id, book_id, title, summary, price, img_url, count : 도서 수량}, …{}]
