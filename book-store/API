## 회원 API

    1. 회원 가입
        - Method : POST
        - URL : /users/join
        - HTTP Status code : 성공(201 - created), 실패
        - Request Body : JSON형태, email, password
        - Response Body :
    2. 로그인
        - Method : POST
        - URL : /users/login
        - HTTP Status code : 성공(200), 실패
        - Request Body : JSON형태, email, password
        - Response Cookie : JWT Token 
        - Response Body : 
    3. 비밀번호 초기화 요청
        - Method : POST
        - URL : /users/reset
        - HTTP Status code : 성공(200), 실패
        - Request Body : JSON형태, email
        - Response Body : email
    4. 비밀번호 초기화
        - Method : PUT
        - URL : /users/reset
        - HTTP Status code : 성공(200), 실패
        - Request Body : JSON형태, email(이전 페이지에서 입력했던 이메일), password1, password2
        - Response Body :

---

## 도서 API

    1. 전체 도서 조회 (페이지네이션 고려 x)
        - Method : GET
        - URL : /books?limit={page당 도서 개수}&page={현재페이지}
        - HTTP Status code : 성공(200), 실패
        - Request Body :
        - Response Body : [{book_id, img(img_id), title, summary, author, price, likes, publish_date}, …{}]
    2. 개별 도서 조회
        - Method : GET
        - URL : /books/:bookId
        - HTTP Status code : 성공(200), 실패
        - Request Body :
        - Response Body : {img(img_id), title, category, format, isbn, summary, descripiton, author, pages, index, price, likes, me_liked, images: [], publish_date}
    3. 카테고리별 도서 목록 조회
        new:true → 신간 조회(출판일 30일 이내)
        - Method : GET
        - URL : /books?category={categoryId}&new={}
        - HTTP Status code : 성공(200), 실패
        - Request Body :
        - Response Body : [{book_id, img_url, title, summary, author, price, likes, publish_date}, …{}]

---

## 카테고리 API
    1. 카테고리 전체 조회
        - Method : GET
        - URL : /category
        - HTTP Status code : 성공(200), 실패
        - Request Body :
        - Response Body : [{id, name}, ...{}]

## 좋아요 API 

    1. 좋아요 추가
        - Method : POST
        - URL : /likes/:bookId
        - HTTP Status code : 성공(201), 실패
        - Request Body : header(token)
        - Response Body : []
    2. 좋아요 취소
        - Method : DELETE
        - URL : /likes/:bookId
        - HTTP Status code : 성공(200), 실패
        - Request Body : 
        - Response Body : []

---

## 장바구니 API 설계

    1. 장바구니 담기
        - Method : POST
        - URL : /carts
        - HTTP Status code : 성공(201 - inserted, created), 실패
        - Request Body : {book_id, count : 도서 수량}
        - Response Body :
    2. 장바구니 조회
        - Method : GET
        - URL : /carts
        - HTTP Status code : 성공(200), 실패
        - Request Body :
        - Response Body : [{cart_item_id : 장바구니 항목 id, book_id, title, summary, price, img_url, count : 도서 수량}, …{}]
    3. 장바구니 삭제
        - Method : DELETE
        - URL : /carts/:cartId
        - HTTP Status code : 성공(200), 실패
        - Request Body :
        - Response Body :
    4. 장바구니에서 선택한 상품 목록 조회
        - Method : GET
        - URL : /carts/selected
        - HTTP Status code : 성공(200), 실패
        - Request Body : [{cart_item_id}, ...{}]
        - Response Body : [{cart_item_id : 장바구니 항목 id, book_id, title, summary, price, img_url, count : 도서 수량}, …{}]

-> 2, 4를 selected 상품 데이터의 유무에 따라 다른 동작을 하도록 합치기

---

## 주문(결제) API 설계

    1. 결제하기(주문하기)
        - Method : POST
        - URL : /orders
        - HTTP Status code : 성공(201), 실패
        - Request Body : [{items: [{ cart_item_id, book_id, count:책 개수} ...], 
                        delivery : {address, name, contact}, total_price, total_quantity }]
        - Response Body : []
    2. 주문 목록 조회
        - Method : GET
        - URL : /orders
        - HTTP Status code : 성공(200), 실패
        - Request Body : []
        - Response Body : [{order_id, createdAt, delivery : {address, name, contact}, book_title, total_price, total_count}, ...{}]
    3. 주문 상세 상품 조회
        - Method : GET
        - URL : /orders/:order_id
        - HTTP Status code : 성공(200), 실패
        - Request Body : []
        - Response Body : [{book_id, book_title, author, img_url, price, summary, count}, ...{}]